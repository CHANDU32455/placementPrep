Project Title
    Multi-Mode Authentication System using Java OOP Concepts

Objective
    To implement a secure, extensible, and reusable authentication system in Java 
    using object-oriented principles including abstraction, interfaces, inheritance, 
    and polymorphism. The system generates time-based OTPs and supports multiple delivery modes
    like Console, Email, and SMS.

System Overview
    This system simulates a two-factor authentication mechanism with the following features:

    OTP (One-Time Password) generation every 10 seconds.

    OTP validation with a fallback to previous code (for slight delays).

    Dynamic switching between authentication modes.

Class Structure
    1. DefaultCodeGenerator
        Purpose: Generates 6-digit OTPs.
        Key Method:
            generate(): Returns a random 6-digit code (between 100000 and 999999).

    2. AuthMode (Interface)
        Defines the behavior for various authentication delivery modes.
        Methods:
            void sendCode(int code)
            String getName()

    3. ConsoleAuthMode, EmailAuthMode, SmsAuthMode
        Implements: AuthMode
        Purpose: Implements mode-specific delivery behavior.
        working:
            -> sendCode() : prints code 
            -> getName()  : returns name of mode (Console/Email/SMS)
        Examples:
            Console: Displays code in terminal.
            Email: Simulates email delivery via System.out.
            SMS: Simulates SMS delivery via System.out.

    4. InvalidCodeException
        - An InvalidCodeException class extending Exception with a 
            public InvalidCodeException method with params message(String) and returning message.
        - Custom exception used when the entered code is invalid.

    5. Authenticator
        Handles the core authentication logic.
        Fields:
            current, prev: Store the latest and previous OTPs.
            defaultMode, currentMode: Maintain selected authentication mode.
            Authenticator(AuthMode defaultMode): Constructer to initialize defaultMode and CurrentMode with AuthMode being datatype because modes are implementing it.
        Methods:
            generateAndSendCode(): Generates and delivers new code using default mode and is synchronized for thread safety and returns nothing, but updates prev with current, current with generting a new otp and sending it to default mode.
            getCurrentCode(): synchronized returns the current live otp.
            validate(int code): a Boolean type, that verifies input against current or previous OTP.
            sendCodeVia(AuthMode mode): Temporarily switches to another mode, sends code, and reverts to default. it getsClass() of both currentMode and Switchingmode(i.e, param)  if equal asks to choose another mode else, using mode it sends code to current and updates currentmode with default mode.

    6. PStuffAuthenticator (Main Class)
        - Runs the user interface and drives the application loop.
        - start with creating an obj called defaultMode with ConsoleAuthMode()
        - create obj for Authenticator and pass param defaultMode that sets us things ready..
        - print available modes..
        - start a thread for refresher --  with ananymous class concept and while current thread is not interrupted, using authenticator obj call generateAndSendCode and try sleeping for 10secs,..  and if any exceptions just break
        - now refresher.start(); helps you to start the thread..
        - using a while loop, keep taking user input and trim it, and check if it matches tothe choice if so, then using auth obj, sendcode via that mode.. if not, check if it matches to OTP.. if yes congractulate and break and interrupt thread else handle it with custom exception..


Flow:
    => Starts OTP refresher thread (every 10 seconds).
    => Accepts user input for OTP or mode selection.
    => Validates OTP or switches delivery modes.
    => Stops on successful authentication.

    Execution Flow
        1. Starts in Console mode by default.
        2. Every 10 seconds, a new OTP is generated and displayed.
        3. User can enter OTP to authenticate OR
        select modes: 1-Console, 2-Email, 3-SMS.
        4. Authentication succeeds if code matches current or previous.


Sample Output

        Available authentication modes:
        1. Console
        2. Email
        3. SMS

        Default mode: Console


        Enter code or choose mode (1-Console, 2-Email, 3-SMS):
        Console Mode: Your Current Code: 676235

        Console Mode: Your Current Code: 986743
        1

        You're already in this mode (Console). Try switching to a different one.

        Enter code or choose mode (1-Console, 2-Email, 3-SMS):
        Console Mode: Your Current Code: 128697
        2

        Email sent with code: 128697

        Switched temporarily to Email mode. Now back to default: Console

        Enter code or choose mode (1-Console, 2-Email, 3-SMS): 3

        SMS sent with code: 128697

        Switched temporarily to SMS mode. Now back to default: Console

        Enter code or choose mode (1-Console, 2-Email, 3-SMS):
        Console Mode: Your Current Code: 560692
        986743
        Invalid code. Try again...

        Enter code or choose mode (1-Console, 2-Email, 3-SMS):
        Console Mode: Your Current Code: 597161
        560692

        We got you bro...  Authentication Successful.

Key OOP Concepts Demonstrated
    Concept	                                Description
        Abstraction	            OTP generation and sending modes are abstracted into interfaces/classes.
        Encapsulation	        Core logic is wrapped inside the Authenticator class.
        Polymorphism	        AuthMode interface allows dynamic handling of multiple modes.
        Inheritance	            Not used explicitly, but can be extended for advanced delivery mechanisms like WhatsApp or Push Notifications.
        Multithreading	        Used to refresh OTPs asynchronously every 10 seconds.
        Modularity	            Each component (code gen, mode, logic) is in a separate class
        Thread Safety	        synchronized methods prevent race conditions during multi-threaded runs
        Custom Exception	    InvalidCodeException extends Exception, showcasing controlled inheritance

Future Scope
    Integrate actual email/SMS gateways.
    Add user database and OTP expiration timestamps.
    Add logging and audit trails.
    Support UI via JavaFX or web frontend.
    Add WhatsAppMode  --  Just another class implementing AuthMode
    Add token expiry  --  Add timestamp to encapsulated state
    Add retry limit   --    Use inheritance to extend Authenticator with retry logic
    Add logging	      --    Extract common logic into a BaseAuthMode if needed


CODE:


import java.util.Random;
import java.util.Scanner;

// gen a rand 6 dig code..
class DefaultCodeGenerator {
    private final Random rand = new Random();
    public int generate() {
        return 100000 + rand.nextInt(900000);
    }
}
// topâ€‘level, named interface.
// defines behavior that every auth mode should implement...
interface AuthMode {
    void sendCode(int code);
    String getName(); // gets name of auth mode... console/email/sms
}

// console mode module...
class ConsoleAuthMode implements AuthMode {
    @Override
    public void sendCode(int code) {
        System.out.println("\nConsole Mode: Your Current Code: " + code);
    }
    @Override
    public String getName() {
        return "Console";
    }
}

// email mode module..
class EmailAuthMode implements AuthMode {
    @Override
    public void sendCode(int code) {
        System.out.println("\nEmail sent with code: " + code);
    }
    @Override
    public String getName() {
        return "Email";
    }
}

// sms simulation module..
class SmsAuthMode implements AuthMode {
    @Override
    public void sendCode(int code) {
        System.out.println("\nSMS sent with code: " + code);
    }
    @Override
    public String getName() {
        return "SMS";
    }
}

// custom exception to handle case of useee entering wrong code...
class InvalidCodeException extends Exception {
    public InvalidCodeException(String message) {
        super(message);
    }
}

// main authenticator logic for authentication...
class Authenticator {
    private int current = 0, prev = 0;
    private final DefaultCodeGenerator generator = new DefaultCodeGenerator(); // gen a new code
    private final AuthMode defaultMode; // console mode
    private AuthMode currentMode; // can be console, email, sms...

    // constructr..
    //AuthMode is an interface, not a primitive data type like int or double.
    // But in Java, you can use an interface as a type, because you can pass any object that implements that interface.
    public Authenticator(AuthMode defaultMode) {
        this.defaultMode = defaultMode;
        this.currentMode = defaultMode;
    }

    // syncronized ensures security in threading..
    // i mean when multiple threads ineract with it,.. 
    public synchronized void generateAndSendCode() {
        prev = current;
        current = generator.generate();
        defaultMode.sendCode(current);
    }

    public synchronized int getCurrentCode() {
        return current;
    }

    public synchronized boolean validate(int code) {
        return code == current || code == prev;
    }

    public synchronized void sendCodeVia(AuthMode mode) {
        if (currentMode.getClass() == mode.getClass()) {
            System.out.println("\nYou're already in this mode (" + currentMode.getName() + "). Try switching to a different one.");
        } else {
            mode.sendCode(current);
            System.out.println("\nSwitched temporarily to " + mode.getName() + " mode. Now back to default: " + defaultMode.getName());
            currentMode = defaultMode; // return to default
        }
    }
}

// main method comes here.. 
public class PStuffAuthenticator {
    public static void main(String[] args) {
        try (Scanner sc = new Scanner(System.in)) {
            ConsoleAuthMode defaultMode = new ConsoleAuthMode();
            Authenticator auth = new Authenticator(defaultMode);
            
            System.out.println("   Available authentication modes:");
            System.out.println("1. Console");
            System.out.println("2. Email");
            System.out.println("3. SMS");
            System.out.println("\n Default mode: Console\n");
            // ananymous class -- thread to refresh code..
            Thread refresher = new Thread(() -> {
                while (!Thread.currentThread().isInterrupted()) {
                    auth.generateAndSendCode();
                    try {
                        // for production use..
                        // ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);
                        // scheduler.scheduleAtFixedRate(() -> generateNewCode(), 0, 10, TimeUnit.SECONDS);
                        Thread.sleep(10000); // fine for current usecase..
                    } catch (InterruptedException e) {
                        break;
                    }
                }
            });
            refresher.start();
            
            // using while to make sure it keeps endless except interrupts loop...
            while (true) {
                System.out.print("\n Enter code or choose mode (1-Console, 2-Email, 3-SMS): ");
                String input = sc.nextLine().trim();
                
                if (input.matches("[1-3]")) {
                    int choice = Integer.parseInt(input);
                    switch (choice) {
                        case 1 -> auth.sendCodeVia(new ConsoleAuthMode());
                        case 2 -> auth.sendCodeVia(new EmailAuthMode());
                        case 3 -> auth.sendCodeVia(new SmsAuthMode());
                    }
                    continue;
                }
                
                if (input.matches("\\d{6}")) {
                    try {
                        int code = Integer.parseInt(input);
                        if (auth.validate(code)) {
                            System.out.println("\nWe got you bro...  Authentication Successful.");
                            refresher.interrupt(); // breaking point....
                            break;
                        } else {
                            throw new InvalidCodeException("Invalid code. Try again...");
                        }
                    } catch (InvalidCodeException e) {
                        System.out.println(e.getMessage());
                    }
                } else {
                    System.out.println("Invalid input. Enter 6-digit OTP or choose mode (1-3).");
                }
            }
        }
    }
}

